#+title: IO measurements
#+STARTUP: inlineimages

#+begin_src gnuplot :exports code :file activity.png
  reset

  set datafile separator ','

  # use the first line as title
  set key autotitle columnhead

  set size ratio 0.5

  set xtics 25000
  set xrange [2981990:3081990]
  set format x '%.0f'

  set format y '%.0f'


  plot 'activity.csv' using 1:3 with lines, \
       '' using 1:19 with lines, \
       '' using 1:23 with lines, \
       '' using 1:27 with lines, \
       '' using 1:31 with lines
#+end_src

#+RESULTS:
[[file:activity.png]]
* Call graph using Landmarks

With some [[https://github.com/LexiFi/landmarks][landmarks]] instrumentation in ~Irmin_pack_unix.Io~ we can observe how much time is spent doing IO:

#+begin_src shell :results output code
  OCAML_LANDMARKS="on,time,threshold=0,output=stdout" dune exec --instrument-with landmarks ./measure_io_activity.exe
#+end_src

#+RESULTS:
#+begin_src shell
      [ 17540.60G cycles in    100004 calls ]     - 94.54% : Measure_io_activity.exec
      [ 17014.95G cycles in 423228165 calls ]     |   - 97.00% : Replay.Operation.exec
      [ 5788.38G cycles in 220756931 calls ]     |   |   - 34.02% : Replay.Operation.exec_find
      [ 4866.89G cycles in 220756931 calls ]     |   |   |   - 84.08% : Tree.Make.find_tree
      [ 1107.21G cycles in 420131874 calls ]     |   |   |   |   - 22.75% : Io.Util.really_read
      [   19.68G cycles in   8603546 calls ]     |   |   |   -  0.34% : Io.Util.really_read
      [ 5089.65G cycles in    100004 calls ]     |   |   - 29.91% : Replay.Operation.exec_commit
      [  133.54G cycles in    100004 calls ]     |   |   |   -  2.62% : Store.Make.Commit.v
      [    4.80G cycles in    200008 calls ]     |   |   |   |   -  3.60% : Io.Util.really_write
      [  421.42M cycles in    300012 calls ]     |   |   |   |   -  0.32% : Pack_store.Make.cast
      [   25.71K cycles in         2 calls ]     |   |   |   |   -  0.00% : Io.Util.really_read
      [   87.31G cycles in    206047 calls ]     |   |   |   -  1.72% : Io.Util.really_write
      [   75.02G cycles in  31255051 calls ]     |   |   |   -  1.47% : Io.Util.really_read
      [    1.34G cycles in    100004 calls ]     |   |   |   -  0.03% : Tree.Make.list
      [  313.67M cycles in    300012 calls ]     |   |   |   -  0.01% : Pack_store.Make.cast
      [  249.11M cycles in    100004 calls ]     |   |   |   -  0.00% : Store.Make.Commit.hash
      [  223.77M cycles in    100004 calls ]     |   |   |   -  0.00% : Tree.Make.find_tree
      [  108.76M cycles in    100004 calls ]     |   |   |   -  0.00% : Store.Make.Commit.key
      [ 4584.18G cycles in 111687614 calls ]     |   |   - 26.94% : Replay.Operation.exec_mem
      [ 4190.93G cycles in 111687614 calls ]     |   |   |   - 91.42% : Tree.Make.find_tree
      [ 1300.52G cycles in 496412885 calls ]     |   |   |   |   - 31.03% : Io.Util.really_read
      [   13.54G cycles in   6059630 calls ]     |   |   |   -  0.30% : Io.Util.really_read
      [  706.23G cycles in  88222332 calls ]     |   |   -  4.15% : Replay.Operation.exec_add
      [    1.45G cycles in    476610 calls ]     |   |   |   -  0.21% : Io.Util.really_read
      [   18.37G cycles in   1149441 calls ]     |   |   -  0.11% : Replay.Operation.exec_remove
      [    1.14G cycles in    330407 calls ]     |   |   |   -  6.23% : Io.Util.really_read
      [   12.26G cycles in     34640 calls ]     |   |   -  0.07% : Replay.Operation.exec_add_tree
      [    4.17G cycles in   1258262 calls ]     |   |   |   - 34.00% : Io.Util.really_read
      [   36.26M cycles in        36 calls ]     |   |   |   -  0.30% : Io.Util.really_write
      [   24.76K cycles in        21 calls ]     |   |   |   -  0.00% : Pack_store.Make.cast
      [    9.18G cycles in    200009 calls ]     |   |   -  0.05% : Replay.Operation.exec_checkout
      [    5.10G cycles in    200009 calls ]     |   |   |   - 55.54% : Store.Make.Commit.of_hash
      [    1.73G cycles in    200009 calls ]     |   |   |   |   - 34.00% : Store.Make.Commit.of_key
      [   10.28K cycles in         3 calls ]     |   |   |   |   |   -  0.00% : Io.Util.really_read
      [    1.09G cycles in    200009 calls ]     |   |   |   - 11.86% : Store.Make.Commit.tree
      [  298.77M cycles in    200009 calls ]     |   |   |   |   - 27.44% : Store.Make.Commit.node
      [  529.36M cycles in    200009 calls ]     |   |   |   -  5.77% : Replay.Operation.of_commit_hash_lhs

    [...]


  Aggregated table:
  ----------------
                                                       Name;                              Filename;    Calls;     Time; Sys time
                                                       ROOT;                       src/landmark.ml;        0; 18554.44G; 9638.602
                                   Measure_io_activity.exec;  audits/io/measure_io_activity.ml:142;   100004; 17540.60G; 9161.721
                                      Replay.Operation.exec;              lib/replay/replay.ml:488; 423228165; 17014.95G; 8884.692
                                        Tree.Make.find_tree;                src/irmin/tree.ml:1689; 333284026; 9063.56G; 4737.740
                                 Replay.Operation.exec_find;              lib/replay/replay.ml:288; 220756931; 5788.38G; 3044.202
                               Replay.Operation.exec_commit;              lib/replay/replay.ml:453;   100004; 5089.65G; 2645.542
                                  Replay.Operation.exec_mem;              lib/replay/replay.ml:309; 111687614; 4584.18G; 2379.356
                                        Io.Util.really_read;          src/irmin-pack/unix/io.ml:38; 964610035; 2522.83G; 1259.393
                                  Replay.Operation.exec_add;              lib/replay/replay.ml:315; 88222332;  706.23G;  375.796
                                        Store.Make.Commit.v;                src/irmin/store.ml:171;   100004;  133.54G;   31.034
                                       Io.Util.really_write;          src/irmin-pack/unix/io.ml:27;   406103;   92.15G;   48.436
                               Replay.Operation.exec_remove;              lib/replay/replay.ml:320;  1149441;   18.37G;    9.597
                             Replay.Operation.exec_add_tree;              lib/replay/replay.ml:303;    34640;   12.26G;    6.139
                             Replay.Operation.exec_checkout;              lib/replay/replay.ml:269;   200009;    9.18G;    4.800

[...]

#+end_src

See [[./landmarks-call-graph.out]] for the full output.

Some insights:

- Most time is spend doing a `Context.find` operation.
- `Tree.find_tree` is an expensive operation not too much time spent doing IO

